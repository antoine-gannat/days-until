{"version":3,"sources":["components/AddEvent.js","components/DisplayEvents.js","App.js","components/Snackbar.js","serviceWorker.js","components/ServiceWorker.js","index.js"],"names":["AddEvent","props","todaysDate","Date","setHours","state","startDate","endDate","name","e","preventDefault","this","length","setState","document","getElementById","value","onAdd","getTime","store","addNotification","title","message","type","container","dismiss","duration","className","htmlFor","onChange","target","placeholder","id","autoComplete","selected","date","onClick","createEvent","bind","Component","DisplayEvents","hovered","mousePosX","dayWidth","timestamp","Math","round","getDate","getMonth","getFullYear","event","timestampToDays","date1","date2","earliestStartEvent","ms","timestampToDate","getElementsByClassName","clientX","getBoundingClientRect","x","totalDays","remainingDays","earliestStart","events","onMouseEnter","onMouseLeave","onMouseMove","mouseHoverMove","style","marginLeft","getDateFromMousePos","map","index","getTotalDays","getRemainingDays","width","getDaysBetween","key","role","backgroundColor","getProgressBarColor","aria-valuenow","aria-valuemin","aria-valuemax","displayProgressBars","displayEvents","App","loadEvents","localStorage","getItem","JSON","parse","sort","a","b","eventId","splice","setItem","stringify","newEvent","push","onEventRemove","onEventAdd","Snackbar","visible","onAccept","btnText","onClose","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ServiceWorker","registrationWaiting","reg","waiting","postMessage","getNewContent","ReactDOM","render"],"mappings":"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","file":"static/js/main.d09d705e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// Datepicker component\nimport DatePicker from \"react-datepicker\";\n// Notification component\nimport { store } from 'react-notifications-component';\n// Page style\nimport '../assets/css/addEvent.css';\n// Datepicker style\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nexport default class AddEvent extends Component {\n  constructor(props) {\n    super(props);\n    // Get todays date and set it to midnight\n    this.todaysDate  = new Date()\n    this.todaysDate.setHours(0, 0, 0, 0);\n\n    this.state = {\n      startDate: this.todaysDate,\n      endDate: null,\n      name: \"\"\n    }\n  }\n\n  createEvent(e) {\n    e.preventDefault();\n    if (!this.state\n      || !this.state.name || this.state.name.length === 0\n      || !this.state.endDate || !this.state.startDate) {\n      store.addNotification({\n        title: \"Missing parameter\",\n        message: \"Please fill every field.\",\n        type: \"danger\",\n        container: \"top-right\",\n        dismiss: {\n          duration: 5000\n        }\n      });\n      return;\n    }\n    // reset the fields\n    this.setState({\n      startDate: this.todaysDate,\n      endDate: null,\n      name: \"\"\n    });\n    // reset the input field\n    document.getElementById('input-event-name').value = \"\";\n\n    this.props.onAdd({\n      name: this.state.name,\n      startDate: new Date(this.state.startDate).getTime(),\n      endDate: new Date(this.state.endDate).getTime()\n    })\n  }\n\n  // New event form\n  render() {\n    return (\n      <div>\n        <form className=\"add-event-form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"input-event-name\">Event's name</label>\n            <input type=\"text\" className=\"form-control\" onChange={(e) => this.setState({ name: e.target.value })} placeholder=\"Name\" id=\"input-event-name\" autoComplete=\"off\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"input-event-date-begin\">Start date</label>\n            <DatePicker selected={this.state.startDate} onChange={(date) => this.setState({ startDate: date })} id=\"input-event-date-begin\" autoComplete=\"off\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"input-event-date-end\">End date</label>\n            <DatePicker selected={this.state.endDate} onChange={(date) => this.setState({ endDate: date })} id=\"input-event-date-end\" autoComplete=\"off\" />\n          </div>\n          <button className=\"btn btn-primary\" onClick={this.createEvent.bind(this)}>Submit</button>\n        </form>\n      </div>\n    )\n  }\n\n}","import React, { Component } from 'react';\nimport '../assets/css/displayEvents.css';\n\nexport default class DisplayEvents extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hovered: false,\n      mousePosX: 0\n    }\n    // width of a day in pixels\n    this.dayWidth = 10;\n  }\n\n  // timestamp convertion methods\n  timestampToDays(timestamp) {\n    // divide by 1000: milliseconds to seconds\n    // divide by 60: seconds to minutes\n    // divide by 60: minutes to hours\n    // divide by 24: hours to days\n    return (Math.round(timestamp / 1000 / 60 / 60 / 24));\n  }\n\n  // convert timestamp to date (dd/mm/yyyy)\n  timestampToDate(timestamp) {\n    const date = new Date(timestamp);\n    return ((date.getDate() < 10 ? '0' : '') + date.getDate() + '/' + (date.getMonth() < 9 ? '0' : '') + (date.getMonth() + 1) + '/' + date.getFullYear());\n  }\n\n  getRemainingDays(event) {\n    return (this.timestampToDays(event.endDate - new Date().getTime()));\n  }\n\n  getTotalDays(event) {\n    return (this.timestampToDays(event.endDate - event.startDate));\n  }\n\n  getDaysBetween(date1, date2) {\n    if (date1 > date2) {\n      return (this.timestampToDays(date1) - this.timestampToDays(date2));\n    } else {\n      return (this.timestampToDays(date2) - this.timestampToDays(date1));\n    }\n  }\n\n  getDateFromMousePos(earliestStartEvent){\n    // convert pixels back to days\n    const days = this.state.mousePosX / this.dayWidth;\n    // convert days to ms\n    const ms = days * 24 * 60 * 60 * 1000;\n    return (this.timestampToDate(earliestStartEvent.startDate + ms));\n  }\n\n  mouseHoverMove(event) {\n    const container = document.getElementsByClassName('progress-container')[0];\n    const cursorAjustements = 10;\n    this.setState({ mousePosX: event.clientX - cursorAjustements - container.getBoundingClientRect().x })\n  }\n\n  getProgressBarColor(totalDays, remainingDays){\n    // if the event is finished\n    if (remainingDays < 0){\n      return (\"green\");\n    }\n    // if the event hasn't started yet\n    if (remainingDays > totalDays){\n      return (\"orange\");\n    }\n    // if its in progress\n    return (\"blue\");\n  }\n\n  displayProgressBars(){\n    const earliestStart = this.props.events[0];\n\n    return (\n      <div className=\"progress-container col-10\"\n      onMouseEnter={() => this.setState({ hovered: true })}\n      onMouseLeave={() => this.setState({ hovered: false })}\n      onMouseMove={(e) => { if (this.state.hovered) { this.mouseHoverMove(e) } }}>\n        {\n          this.state.hovered &&\n          <div className=\"vertical-cursor\" style={{ marginLeft: this.state.mousePosX + 'px' }}>\n            <div className=\"bar\"></div>\n            <div className=\"date\">\n              {this.getDateFromMousePos(earliestStart)}\n            </div>\n          </div>\n        }\n      {\n        this.props.events.map((event, index) => {\n          const totalDays = this.getTotalDays(event);\n          const remainingDays = this.getRemainingDays(event)\n          return (\n            <div className=\"progress\"\n              style={{ width: totalDays * this.dayWidth + \"px\", marginLeft: this.getDaysBetween(event.startDate, earliestStart.startDate) * this.dayWidth + \"px\" }}\n              key={\"progress-\" + index}>\n              <div className=\"progress-bar\" role=\"progressbar\"\n                style={{ width: (totalDays - remainingDays) * this.dayWidth + \"px\", backgroundColor: this.getProgressBarColor(totalDays, remainingDays) }}\n                aria-valuenow={remainingDays}\n                aria-valuemin=\"0\"\n                aria-valuemax={totalDays}></div>\n            </div>\n          )\n        })\n      }\n    </div>\n    )\n  }\n\n  displayEvents() {\n    if (!this.props.events || this.props.events.length === 0) {\n      return (<p>No event yet, add one below.</p>)\n    }\n    // get the event that start the first (it is already sorted so its the first one)\n    return (\n      <section className=\"row\">\n        <div className=\"events-info-panel col-2\">\n          {\n            this.props.events.map((event, index) => {\n              return (\n                <div key={index}>\n                  {event.name}\n                </div>\n              )\n            })\n          }\n        </div>\n        {this.displayProgressBars()}\n      </section>\n    )\n  }\n  // New event form\n  render() {\n    return (\n      <div className=\"events-container\">\n        <h2>Events</h2>\n        {this.displayEvents()}\n      </div>\n    )\n  }\n\n}","import React, { Component } from 'react';\nimport AddEvent from './components/AddEvent';\nimport DisplayEvents from './components/DisplayEvents';\nimport './assets/css/app.css';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      events: this.loadEvents()\n    }\n  }\n\n  loadEvents(){\n    let events = []\n    if (localStorage.getItem('event-manager-events')){\n      events = JSON.parse(localStorage.getItem('event-manager-events'))\n    }\n    events.sort((a, b) => {\n      if (a.startDate < b.startDate){\n        return (-1);\n      }\n      else if (a.startDate > b.startDate){\n        return (1);\n      }\n      return (0);\n    })\n    return (events);\n  }\n\n  // remove an event\n  onEventRemove(eventId) {\n    // Get the current events\n    let events = this.state.events;\n    // Remove the event\n    events.splice(eventId, 1);\n    // update the state\n    this.setState({ events: events });\n    // Update the localstorage\n    localStorage.setItem('event-manager-events', JSON.stringify(events));\n  }\n\n  // add an event\n  onEventAdd(newEvent) {\n    // Get the current events\n    let events = this.state.events;\n    // Add the new event\n    events.push(newEvent);\n    // Update the localstorage\n    localStorage.setItem('event-manager-events', JSON.stringify(events));\n    // reload events\n    this.setState({events: this.loadEvents()})\n  }\n\n  render() {\n    return (\n      <main className=\"app\">\n        <h1>Deadline Manager</h1>\n        <DisplayEvents events={this.state.events} onEventRemove={this.onEventRemove.bind(this)} />\n        <AddEvent onAdd={this.onEventAdd.bind(this)} />\n      </main>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport '../assets/css/snackbar.css';\n\n// Display a snackbar at the bottom of the screen\n// props:\n//    visible: boolean, show or hide the Snackbar\n//    message: string, message to display\n//    onAccept: callback, function called when the left button is called\n//    onClose: callback, function called when the close button is pressed\n//    btnText: string, text in the left button\nexport default class Snackbar extends Component {\n  render() {\n    return (\n      <div className=\"snackbar\">\n        <div className={ this.props.visible ? \"snackbar-content\": \"hide\"}>\n          <p>{this.props.message}</p>\n          <button className=\"action-btn\" onClick={this.props.onAccept}>{this.props.btnText}</button>\n          <button className=\"float-right\" onClick={this.props.onClose}>Close</button>\n        </div>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n  else if (process.env.NODE_ENV !== 'production'){\n    console.log(\"Service worker disabled, not in production mode\")\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport Snackbar from './Snackbar';\nimport * as serviceWorker from '../serviceWorker';\n\n// Register the service worker and display a refresh button if new content is found\nexport default class ServiceWorker extends Component {\n  constructor(props) {\n    super(props);\n    // set the component state\n    this.state = {\n      visible: false,\n      registrationWaiting: null\n    }\n  }\n\n  // register the service worker on mount\n  componentDidMount(){\n    // register the service worker\n    serviceWorker.register({\n      onUpdate: this.onUpdate.bind(this)\n    });\n  }\n  // unregister the service worker on unmount\n  componentWillUnmount(){\n    serviceWorker.unregister();\n  }\n\n  // if an update is found, display a snackbar to refresh the page\n  onUpdate(reg){\n    this.setState({registrationWaiting: reg.waiting, visible: true});\n  }\n\n  // load updated content and refresh the page \n  getNewContent() {\n    // hide the snackbar\n    this.setState({visible: false});\n    // if the registration is found\n    if (this.state.registrationWaiting) {\n      // switch the service worker to 'active'\n      // forcing it to get new content uppon next refresh\n      this.state.registrationWaiting.postMessage({ type: 'SKIP_WAITING' });\n      // once the message has been processed, refresh the page\n      this.state.registrationWaiting.addEventListener('statechange', e => {\n        if (e.target.state === 'activated') {\n          // refresh\n          window.location.reload();\n        }\n      })\n    }\n    else{\n      console.error(\"No new content found.\")\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Snackbar\n          visible={this.state.visible}\n          btnText=\"Refresh\"\n          message=\"New version available !\"\n          onAccept={this.getNewContent.bind(this)}\n          onClose={() => this.setState({visible:false})}/>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ServiceWorker from './components/ServiceWorker';\nimport './assets/css/index.css';\n// React notifications\nimport ReactNotification from 'react-notifications-component'\nimport 'react-notifications-component/dist/theme.css'\n\nReactDOM.render(\n  <main>\n    <ReactNotification />\n    <App />\n    <ServiceWorker/>\n  </main>, document.getElementById('root'));"],"sourceRoot":""}