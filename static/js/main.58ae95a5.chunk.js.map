{"version":3,"sources":["components/AddEvent.js","components/DisplayEvents.js","App.js","components/Snackbar.js","serviceWorker.js","components/ServiceWorker.js","index.js"],"names":["AddEvent","props","now","Date","setHours","state","startDate","endDate","name","e","preventDefault","this","length","console","log","onAdd","getTime","store","addNotification","title","message","type","container","dismiss","duration","className","htmlFor","onChange","setState","target","value","placeholder","id","autoComplete","selected","date","onClick","createEvent","bind","Component","DisplayEvents","timestamp","Math","round","getDate","getMonth","getFullYear","event","timestampToDays","events","map","index","totalDays","getTotalDays","remainingDays","getRemainingDays","key","timestampToDate","style","width","role","aria-valuenow","aria-valuemin","aria-valuemax","onEventRemove","displayEvents","App","localStorage","getItem","JSON","parse","eventId","splice","setItem","stringify","newEvent","push","onEventAdd","Snackbar","visible","onAccept","btnText","onClose","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ServiceWorker","registrationWaiting","reg","waiting","postMessage","getNewContent","ReactDOM","render","document","getElementById"],"mappings":"wUAUqBA,G,wBACnB,WAAYC,GAAQ,IAAD,sBACjB,4CAAMA,IACN,IAAIC,EAAM,IAAIC,KAFG,OAGjBD,EAAIE,SAAS,EAAG,EAAG,EAAG,GACtB,EAAKC,MAAQ,CACXC,UAAWJ,EACXK,QAAS,KACTC,KAAM,IAPS,E,yEAWPC,GACVA,EAAEC,iBACGC,KAAKN,OACJM,KAAKN,MAAMG,MAAmC,IAA3BG,KAAKN,MAAMG,KAAKI,QACnCD,KAAKN,MAAME,SAAYI,KAAKN,MAAMC,WAYxCO,QAAQC,IAAIH,KAAKN,MAAMC,WACvBO,QAAQC,IAAIH,KAAKN,MAAME,SACvBI,KAAKV,MAAMc,MAAM,CACfP,KAAMG,KAAKN,MAAMG,KACjBF,UAAW,IAAIH,KAAKQ,KAAKN,MAAMC,WAAWU,UAC1CT,QAAS,IAAIJ,KAAKQ,KAAKN,MAAME,SAASS,aAhBtCC,QAAMC,gBAAgB,CACpBC,MAAO,oBACPC,QAAS,2BACTC,KAAM,SACNC,UAAW,YACXC,QAAS,CACPC,SAAU,S,+BAeR,IAAD,OACP,OACE,6BACE,0BAAMC,UAAU,kBACd,yBAAKA,UAAU,cACb,2BAAOC,QAAQ,oBAAf,gBACA,2BAAOL,KAAK,OAAOI,UAAU,eAAeE,SAAU,SAAClB,GAAD,OAAO,EAAKmB,SAAS,CAAEpB,KAAMC,EAAEoB,OAAOC,SAAUC,YAAY,OAAOC,GAAG,mBAAmBC,aAAa,SAE9J,yBAAKR,UAAU,cACb,2BAAOC,QAAQ,0BAAf,cACA,kBAAC,IAAD,CAAYQ,SAAUvB,KAAKN,MAAMC,UAAWqB,SAAU,SAACQ,GAAD,OAAU,EAAKP,SAAS,CAAEtB,UAAW6B,KAASH,GAAG,yBAAyBC,aAAa,SAE/I,yBAAKR,UAAU,cACb,2BAAOC,QAAQ,wBAAf,YACA,kBAAC,IAAD,CAAYQ,SAAUvB,KAAKN,MAAME,QAASoB,SAAU,SAACQ,GAAD,OAAU,EAAKP,SAAS,CAAErB,QAAS4B,KAASH,GAAG,uBAAuBC,aAAa,SAEzI,4BAAQR,UAAU,kBAAkBW,QAASzB,KAAK0B,YAAYC,KAAK3B,OAAnE,gB,GAtD4B4B,cCPjBC,G,mBACnB,aAAe,IAAD,8BACZ,+CACKnC,MAAQ,GAFD,E,6EAOEoC,GAKd,OAAQC,KAAKC,MAAMF,EAAY,IAAO,GAAK,GAAK,M,sCAIlCA,GACd,IAAMN,EAAO,IAAIhC,KAAKsC,GACtB,OAASN,EAAKS,UAAY,GAAK,IAAM,IAAMT,EAAKS,UAAY,KAAOT,EAAKU,WAAa,EAAI,IAAM,KAAOV,EAAKU,WAAa,GAAK,IAAMV,EAAKW,gB,uCAGzHC,GACf,OAAQpC,KAAKqC,gBAAgBD,EAAMxC,SAAU,IAAIJ,MAAOa,a,mCAG7C+B,GACX,OAAQpC,KAAKqC,gBAAgBD,EAAMxC,QAAUwC,EAAMzC,a,sCAGpC,IAAD,OACd,OAAKK,KAAKV,MAAMgD,QAAuC,IAA7BtC,KAAKV,MAAMgD,OAAOrC,OAI1C,6BAEID,KAAKV,MAAMgD,OAAOC,KAAI,SAACH,EAAOI,GAC5B,IAAMC,EAAY,EAAKC,aAAaN,GAC9BO,EAAgB,EAAKC,iBAAiBR,GAC5C,OACE,yBAAKtB,UAAU,QAAQ+B,IAAKL,GAC1B,yBAAK1B,UAAU,OACb,2BAAOA,UAAU,OAAO,EAAKgC,gBAAgBV,EAAMzC,YACnD,2BAAOmB,UAAU,eAAe,EAAKgC,gBAAgBV,EAAMxC,WAE7D,0BAAMkB,UAAU,cAAcsB,EAAMvC,MACpC,yBAAKiB,UAAU,sBACb,yBAAKA,UAAU,WAAWiC,MAAO,CAAEC,MAAmB,GAAZP,EAAiB,OACzD,yBAAK3B,UAAU,eAAemC,KAAK,cACjCF,MAAO,CAAEC,MAAqC,IAA7BP,EAAYE,GAAsB,MACnDO,gBAAeP,EACfQ,gBAAc,IACdC,gBAAeX,MAGpBE,EAAgB,GAAK,4BAAQ7B,UAAU,iBAAiBW,QAAS,kBAAM,EAAKnC,MAAM+D,cAAcb,KAA3E,UACrBG,GAAiB,GAAK,4BAAQ7B,UAAU,kBAAkBW,QAAS,kBAAM,EAAKnC,MAAM+D,cAAcb,KAA5E,qBAzBzB,6D,+BAmCV,OACE,yBAAK1B,UAAU,oBACb,sCACCd,KAAKsD,qB,GAtE6B1B,cCEtB2B,G,mBACnB,aAAe,IAAD,8BACZ,+CACK7D,MAAQ,CACX4C,OAAQkB,aAAaC,QAAQ,wBAA0BC,KAAKC,MAAMH,aAAaC,QAAQ,yBAA2B,IAHxG,E,2EAQAG,GAEZ,IAAItB,EAAStC,KAAKN,MAAM4C,OAExBA,EAAOuB,OAAOD,EAAS,GAEvB5D,KAAKiB,SAAS,CAAEqB,OAAQA,IAExBkB,aAAaM,QAAQ,uBAAwBJ,KAAKK,UAAUzB,M,iCAInD0B,GAET,IAAI1B,EAAStC,KAAKN,MAAM4C,OAExBA,EAAO2B,KAAKD,GAEZhE,KAAKiB,SAAS,CAAEqB,OAAQA,IAExBkB,aAAaM,QAAQ,uBAAwBJ,KAAKK,UAAUzB,M,+BAI5D,OACE,0BAAMxB,UAAU,OACd,gDACA,kBAAC,EAAD,CAAewB,OAAQtC,KAAKN,MAAM4C,OAAQe,cAAerD,KAAKqD,cAAc1B,KAAK3B,QACjF,kBAAC,EAAD,CAAUI,MAAOJ,KAAKkE,WAAWvC,KAAK3B,a,GArCb4B,cCKZuC,G,wLAEjB,OACE,yBAAKrD,UAAU,YACb,yBAAKA,UAAYd,KAAKV,MAAM8E,QAAU,mBAAoB,QACxD,2BAAIpE,KAAKV,MAAMmB,SACf,4BAAQK,UAAU,aAAaW,QAASzB,KAAKV,MAAM+E,UAAWrE,KAAKV,MAAMgF,SACzE,4BAAQxD,UAAU,cAAcW,QAASzB,KAAKV,MAAMiF,SAApD,e,GAP4B3C,cCEhC4C,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAIC,SAASC,EAASC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIC,IAAIC,oBAAwBR,OAAOC,SAASQ,MACpDC,SAAWV,OAAOC,SAASS,OAIvC,OAGFV,OAAOW,iBAAiB,QAAQ,WAC9B,IAAMC,EAAK,UAAMJ,oBAAN,sBAEPV,IAmEV,SAAiCc,EAAOP,GAEtCQ,MAAMD,EAAO,CACXE,QAAS,CAAE,iBAAkB,YAE5BC,MAAK,SAAAC,GAEJ,IAAMC,EAAcD,EAASF,QAAQI,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5Cd,UAAUe,cAAcC,MAAMP,MAAK,SAAAQ,GACjCA,EAAaC,aAAaT,MAAK,WAC7Bf,OAAOC,SAASwB,eAKpBC,EAAgBd,EAAOP,MAG1BsB,OAAM,WACLnG,QAAQC,IACN,oEA1FAmG,CAAwBhB,EAAOP,GAI/BC,UAAUe,cAAcC,MAAMP,MAAK,WACjCvF,QAAQC,IACN,iHAMJiG,EAAgBd,EAAOP,WAIpBG,EAKX,SAASkB,EAAgBd,EAAOP,GAC9BC,UAAUe,cACPjB,SAASQ,GACTG,MAAK,SAAAQ,GACJA,EAAaM,cAAgB,WAC3B,IAAMC,EAAmBP,EAAaQ,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9G,QACfsF,UAAUe,cAAcY,YAI1BzG,QAAQC,IACN,iHAKE4E,GAAUA,EAAO6B,UACnB7B,EAAO6B,SAASX,KAMlB/F,QAAQC,IAAI,sCAGR4E,GAAUA,EAAO8B,WACnB9B,EAAO8B,UAAUZ,WAO5BI,OAAM,SAAAS,GACL5G,QAAQ4G,MAAM,4CAA6CA,M,IC9F5CC,E,YACnB,WAAYzH,GAAQ,IAAD,8BACjB,4CAAMA,KAEDI,MAAQ,CACX0E,SAAS,EACT4C,oBAAqB,MALN,E,iFAYjBjB,EAAuB,CACrBa,SAAU5G,KAAK4G,SAASjF,KAAK3B,U,6CDmH7B,kBAAmBgF,WACrBA,UAAUe,cAAcC,MAAMP,MAAK,SAAAQ,GACjCA,EAAaC,kB,+BC5GRe,GACPjH,KAAKiB,SAAS,CAAC+F,oBAAqBC,EAAIC,QAAS9C,SAAS,M,sCAM1DpE,KAAKiB,SAAS,CAACmD,SAAS,IAEpBpE,KAAKN,MAAMsH,qBAGbhH,KAAKN,MAAMsH,oBAAoBG,YAAY,CAAEzG,KAAM,iBAEnDV,KAAKN,MAAMsH,oBAAoB3B,iBAAiB,eAAe,SAAAvF,GACtC,cAAnBA,EAAEoB,OAAOxB,OAEXgF,OAAOC,SAASwB,aAKpBjG,QAAQ4G,MAAM,2B,+BAGR,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACE1C,QAASpE,KAAKN,MAAM0E,QACpBE,QAAQ,UACR7D,QAAQ,0BACR4D,SAAUrE,KAAKoH,cAAczF,KAAK3B,MAClCuE,QAAS,kBAAM,EAAKtD,SAAS,CAACmD,SAAQ,Y,GAxDLxC,a,cCI3CyF,IAASC,OACP,8BACE,kBAAC,IAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OACOC,SAASC,eAAe,U","file":"static/js/main.58ae95a5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// Datepicker component\nimport DatePicker from \"react-datepicker\";\n// Notification component\nimport { store } from 'react-notifications-component';\n// Page style\nimport '../assets/css/addEvent.css';\n// Datepicker style\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nexport default class AddEvent extends Component {\n  constructor(props) {\n    super(props);\n    let now = new Date()\n    now.setHours(0, 0, 0, 0);\n    this.state = {\n      startDate: now,\n      endDate: null,\n      name: \"\"\n    }\n  }\n\n  createEvent(e) {\n    e.preventDefault();\n    if (!this.state\n      || !this.state.name || this.state.name.length === 0\n      || !this.state.endDate || !this.state.startDate) {\n      store.addNotification({\n        title: \"Missing parameter\",\n        message: \"Please fill every field.\",\n        type: \"danger\",\n        container: \"top-right\",\n        dismiss: {\n          duration: 5000\n        }\n      });\n      return;\n    }\n    console.log(this.state.startDate)\n    console.log(this.state.endDate)\n    this.props.onAdd({\n      name: this.state.name,\n      startDate: new Date(this.state.startDate).getTime(),\n      endDate: new Date(this.state.endDate).getTime()\n    })\n  }\n\n  // New event form\n  render() {\n    return (\n      <div>\n        <form className=\"add-event-form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"input-event-name\">Event's name</label>\n            <input type=\"text\" className=\"form-control\" onChange={(e) => this.setState({ name: e.target.value })} placeholder=\"Name\" id=\"input-event-name\" autoComplete=\"off\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"input-event-date-begin\">Start date</label>\n            <DatePicker selected={this.state.startDate} onChange={(date) => this.setState({ startDate: date })} id=\"input-event-date-begin\" autoComplete=\"off\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"input-event-date-end\">End date</label>\n            <DatePicker selected={this.state.endDate} onChange={(date) => this.setState({ endDate: date })} id=\"input-event-date-end\" autoComplete=\"off\" />\n          </div>\n          <button className=\"btn btn-primary\" onClick={this.createEvent.bind(this)}>Submit</button>\n        </form>\n      </div>\n    )\n  }\n\n}","import React, { Component } from 'react';\nimport '../assets/css/displayEvents.css';\n\nexport default class DisplayEvents extends Component {\n  constructor() {\n    super();\n    this.state = {\n    };\n  }\n\n  // timestamp convertion methods\n  timestampToDays(timestamp) {\n    // divide by 1000: milliseconds to seconds\n    // divide by 60: seconds to minutes\n    // divide by 60: minutes to hours\n    // divide by 24: hours to days\n    return (Math.round(timestamp / 1000 / 60 / 60 / 24));\n  }\n\n  // convert timestamp to date (dd/mm/yyyy)\n  timestampToDate(timestamp) {\n    const date = new Date(timestamp);\n    return ((date.getDate() < 10 ? '0' : '') + date.getDate() + '/' + (date.getMonth() < 9 ? '0' : '') + (date.getMonth() + 1) + '/' + date.getFullYear());\n  }\n\n  getRemainingDays(event) {\n    return (this.timestampToDays(event.endDate - new Date().getTime()));\n  }\n\n  getTotalDays(event) {\n    return (this.timestampToDays(event.endDate - event.startDate));\n  }\n\n  displayEvents() {\n    if (!this.props.events || this.props.events.length === 0) {\n      return (<p>No event yet, add one below.</p>)\n    }\n    return (\n      <div>\n        {\n          this.props.events.map((event, index) => {\n            const totalDays = this.getTotalDays(event);\n            const remainingDays = this.getRemainingDays(event)\n            return (\n              <div className=\"event\" key={index} >\n                <div className=\"row\">\n                  <label className=\"col\">{this.timestampToDate(event.startDate)}</label>\n                  <label className=\"float-right\">{this.timestampToDate(event.endDate)}</label>\n                </div>\n                <span className=\"event-name\">{event.name}</span>\n                <div className=\"event-progress-bar\">\n                  <div className=\"progress\" style={{ width: totalDays * 10 + \"px\" }}>\n                    <div className=\"progress-bar\" role=\"progressbar\"\n                      style={{ width: (totalDays - remainingDays) * 10 + \"px\" }}\n                      aria-valuenow={remainingDays}\n                      aria-valuemin=\"0\"\n                      aria-valuemax={totalDays}></div>\n                  </div>\n                </div>\n                {remainingDays > 0 && <button className=\"btn btn-danger\" onClick={() => this.props.onEventRemove(index)}>Remove</button>}\n                {remainingDays <= 0 && <button className=\"btn btn-success\" onClick={() => this.props.onEventRemove(index)}>Mark as done</button>}\n              </div>\n            )\n          })\n        }\n      </div>\n    )\n  }\n  // New event form\n  render() {\n    return (\n      <div className=\"events-container\">\n        <h2>Events</h2>\n        {this.displayEvents()}\n      </div>\n    )\n  }\n\n}","import React, { Component } from 'react';\nimport AddEvent from './components/AddEvent';\nimport DisplayEvents from './components/DisplayEvents';\nimport './assets/css/app.css';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      events: localStorage.getItem('event-manager-events') ? JSON.parse(localStorage.getItem('event-manager-events')) : []\n    }\n  }\n\n  // remove an event\n  onEventRemove(eventId) {\n    // Get the current events\n    let events = this.state.events;\n    // Remove the event\n    events.splice(eventId, 1);\n    // update the state\n    this.setState({ events: events });\n    // Update the localstorage\n    localStorage.setItem('event-manager-events', JSON.stringify(events));\n  }\n\n  // add an event\n  onEventAdd(newEvent) {\n    // Get the current events\n    let events = this.state.events;\n    // Add the new event\n    events.push(newEvent);\n    // update the state\n    this.setState({ events: events });\n    // Update the localstorage\n    localStorage.setItem('event-manager-events', JSON.stringify(events));\n  }\n\n  render() {\n    return (\n      <main className=\"app\">\n        <h1>Deadline Manager</h1>\n        <DisplayEvents events={this.state.events} onEventRemove={this.onEventRemove.bind(this)} />\n        <AddEvent onAdd={this.onEventAdd.bind(this)} />\n      </main>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport '../assets/css/snackbar.css';\n\n// Display a snackbar at the bottom of the screen\n// props:\n//    visible: boolean, show or hide the Snackbar\n//    message: string, message to display\n//    onAccept: callback, function called when the left button is called\n//    onClose: callback, function called when the close button is pressed\n//    btnText: string, text in the left button\nexport default class Snackbar extends Component {\n  render() {\n    return (\n      <div className=\"snackbar\">\n        <div className={ this.props.visible ? \"snackbar-content\": \"hide\"}>\n          <p>{this.props.message}</p>\n          <button className=\"action-btn\" onClick={this.props.onAccept}>{this.props.btnText}</button>\n          <button className=\"float-right\" onClick={this.props.onClose}>Close</button>\n        </div>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n  else if (process.env.NODE_ENV !== 'production'){\n    console.log(\"Service worker disabled, not in production mode\")\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport Snackbar from './Snackbar';\nimport * as serviceWorker from '../serviceWorker';\n\n// Register the service worker and display a refresh button if new content is found\nexport default class ServiceWorker extends Component {\n  constructor(props) {\n    super(props);\n    // set the component state\n    this.state = {\n      visible: false,\n      registrationWaiting: null\n    }\n  }\n\n  // register the service worker on mount\n  componentDidMount(){\n    // register the service worker\n    serviceWorker.register({\n      onUpdate: this.onUpdate.bind(this)\n    });\n  }\n  // unregister the service worker on unmount\n  componentWillUnmount(){\n    serviceWorker.unregister();\n  }\n\n  // if an update is found, display a snackbar to refresh the page\n  onUpdate(reg){\n    this.setState({registrationWaiting: reg.waiting, visible: true});\n  }\n\n  // load updated content and refresh the page \n  getNewContent() {\n    // hide the snackbar\n    this.setState({visible: false});\n    // if the registration is found\n    if (this.state.registrationWaiting) {\n      // switch the service worker to 'active'\n      // forcing it to get new content uppon next refresh\n      this.state.registrationWaiting.postMessage({ type: 'SKIP_WAITING' });\n      // once the message has been processed, refresh the page\n      this.state.registrationWaiting.addEventListener('statechange', e => {\n        if (e.target.state === 'activated') {\n          // refresh\n          window.location.reload();\n        }\n      })\n    }\n    else{\n      console.error(\"No new content found.\")\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Snackbar\n          visible={this.state.visible}\n          btnText=\"Refresh\"\n          message=\"New version available !\"\n          onAccept={this.getNewContent.bind(this)}\n          onClose={() => this.setState({visible:false})}/>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ServiceWorker from './components/ServiceWorker';\nimport './assets/css/index.css';\n// React notifications\nimport ReactNotification from 'react-notifications-component'\nimport 'react-notifications-component/dist/theme.css'\n\nReactDOM.render(\n  <main>\n    <ReactNotification />\n    <App />\n    <ServiceWorker/>\n  </main>, document.getElementById('root'));"],"sourceRoot":""}